const Transcripts = [
    `Hey guys, welcome to the second episode of Flashback Friday. Today I will be taking you through one of the most popular and powerful programming languages of all time, Java. With over 3 billion devices running Java, it has helped shape the world as we know it today. So without further ado, let's jump in and learn some interesting facts about the history of Java. James Gosling and colleagues at Sun Micro systems developed Java in the early 1990s. This team of engineers called themselves the Green team and initiated the project for interactive television. A typical example of interactive television would be the real time voting on the screen in which the user can control the show. However, this technology was too advanced for the industry and was better suited for the World Wide Web. Java was initially named the Green Talk and then as oak. In 1994 it was officially renamed to Java. The first public implementation was Java 1.0 in 1995. In 2006, sun released Java Virtual Machine as a free and open source software. In the same year, J two Se was renamed as Java Standard edition or Se. Major releases involved Java se Six in March 2006 and Java Se eight in 2014. As of today, Java eight and Java Eleven are identified as long term support versions. Popular Java based products like Junit, Eclipse, Hadoop and Android revolutionized the it industry. The biggest Internet company, Google, has a huge percentage of its development in Java. Accenture is using Java for most of its clients. Hardware companies like Intel, Symantec, Philips, Thompson are all Java users. Java is also considered the official language for Android game development. PUBG, the latest youth obsession, is a cross platform game that that uses Java as a sourcing language. Since 2007, Java has remained a de facto standard and is controlled through the Java community process. Java has evolved to become the most popularly used language and continues to make remarkable contribution into the field of technology. So that is all for todays episode of flashback Friday. This is your host Chinmayi signing off. We will be back with another technology in the next episode. Until then, keep learning and stay tuned to simplilearn.`
    ,
    `Java, a high level multi paradigm programming language famous for its ability to compile to platform independent bytecode. It was designed by James Gosling in 1990 at Sun Microsystems. One of its first demonstrations was the star seven PDA, which gave birth to the Java mascot Duke. Today its one of the worlds most popular programming languages. It powers enterprise web apps with spring framework, big data pipelines with Hadoop, mobile apps on Android, and even things like the controller for NASAS maestro Mars rover. What made Java innovative is that instead of compiling to machine code like c or c, it compiles to bytecode that can run on any operating system without recompiling, which is made possible by executing the code with the Java virtual machine or JVM. Its both a compiled and interpreted language at the same time. The computer just needs to have the Java runtime environment or JRE installed, and most of them do. For developers this means write once, run anywhere. Its a strongly typed language with a curly brace syntax similar to the c family. However, it provides more high level features like garbage collection, runtime type checking and reflection. To get started, install the Java development kit or JDK, then create a file ending in Java. Every Java program starts with a class name which should also match the file name. The class is required to have a main method. This is where your code will start executing inside the method. Define a variable by starting with a type followed by a name and value. We can then print it to the standard output using the built in system class. Now, because we're inside of a class, we define functions as methods on this class. The public keyword means that it can be used outside of the class, and static means that its a member of the class itself as opposed to an instance of the class. We then provide a type and name and return a value from it. You can define your own custom classes which are blueprints for objects, then add attributes and methods to them. Use the new keyword to instantiate an object from the class. It feels very object oriented, but has evolved to support functional patterns like anonymous lambda methods. When your program is finished, use the compiler to generate a class file which contains the bytecode. Now use the Java command to tell the JVM to interpret, separate and run that file. Congratulations, you just built an enterprise grade application. This has been Java in 100 seconds. Hit subscribe for more short videos like this and if we somehow get to 100,000 likes on this video, I'll do a full Java tutorial. Thanks for watching and I will see you in the next one.`
    ,
    `Hello guys, we are back with our next lecture. In this lecture let us go through JDBC drivers, guys. Okay, so basically we did discuss about JDBC introduction and all those things. If you didn't watch that lecture, please watch that guys, because I did discuss about it in detail like with multiple examples. Okay, so in this lecture let us go through JDBC drivers. So basically there, I told you that we will be initializing the thinner driver, right? So are there any previous drivers which we are, which we used like in previous years or previous versions of Java or this is the only driver or you might be having some kind of doubts, right? So in this lecture we will be going through some kind of basic drivers which are of a four types, guys. Okay, so a software component that enables a Java application to interact with database. So that is nothing but a driver, I told you, right? So he is some kind of carrier who will be connecting to the database and he'll be transmitting the data again and again. So that is nothing but a driver, you can say, okay, okay, so here we are having four different types of drivers. So type one, type two, type three, type four. Okay so the first type is nothing but JDBC ODBC bridge driver. So this from the name only will be getting some idea. Similarly JDBC native driver, native API. Okay, so from that, from this thing you will be getting some idea. Again, it is nothing but network. So it is something like network. So guys, why I am highlighting these words is nothing, but once we understand the things you can identify with the names only you can say that. Okay, this is for that. This is for this, this is for this you can identify them. And the last one is nothing but universal which we are using even today. Okay, so first let us go through JDBC ODBC driver. Okay, so you know what is the full form of JDBC that is nothing but Java database connectivity, right? Yes. Similarly, what is the full form of ODBC that is nothing but open database connectivity. So this is by Java, that is nothing but sun microsystems and this is for Windows and which was written or which was created by Microsoft. Guys. Okay, so now you might be having a clear idea, right? Okay, we'll be discussing about that, don't worry. Okay, so here from the name you can get this, get some idea. That is nothing but JDBC ODBC bridge driver. Okay, so from JDBC, ODBC is acting as a bridge. So ODBC is nothing but open database connectivity. Okay, so here from the name you can say ODBC is something like a bridge, right? Okay, sorry for that. Okay, so here is our Java application, guys, so what does our Java application has? So our Java application will be having some Java code that is nothing but application code. After that you will be having the type driver, you will be initializing the driver inside our Java code only, right? So that is the reason why we will be having our Java driver that is nothing. But here we are having type one JDBC bridge. Okay? So this is connected to ODBC, guys. So, so ODBC is also a driver. So this ODBC will be connecting to a specific database, okay? So this will be the flow, guys. So whenever, if there is a query it will be transmitting in this way will go to execute and everything, it will come back in the same process. So the main drawback here is there are some multiple jumps or steps, guys. So one, two, three, again, 1233 steps are needed to send the query and to receive the result. Okay, so that was the first drawback. And the second major drawback is that using ODBC, guys. So basically ODBC was created or developed by Microsoft, guys. So whatever products which are designed by Microsoft, most of them are platform dependent, okay? And those are dependent on Windows, okay? Hence this approach JDBC ODBC driver will work only on Windows, guys, that's the major restriction here. So this JDBC ODBC will not work on Linux, will not work on Macintosh or anything. So that is the main issue with this JDBC ODBC bridge. Okay? Okay, so if you want to know if you want to try this, and even this driver was removed or which is discontinued from Java seven. Guys, from around Java seven, you cannot even code or you cannot even test them. If you want to test this driver, you need to move back to Java six or Java five. Okay? Okay, so ODBC is a windows specific which is created by Microsoft. Hence this driver only works for Windows OS, okay? It cannot work on any other oss like Macintosh, Linux or Unix. So after Java seven, this driver is completely discontinued and multiple flow transfers are done. So that's an issue. And the OS is specific, hence this is not used. And here even exceptional handling is also not included in this first driver, guys. Okay, okay, so this is just a small introduction about the first driver, okay? And one more thing is that we will be using DSN to link between these things, guys, that is nothing but data source name. So these are the things that this first type will be using. So now let us go to the second type. Okay, so now you got some issues, right? So the main issue is that it is platform dependent. So now in type two, let us try to resolve that. So in type two they came up with a particular idea. Instead of using ODBC they are using the particular databases API. So basically even our nowadays we are visiting multiple websites, right? Facebook, Twitter, WhatsApp. WhatsApp is not a website, sorry. Facebook, Twitter again what, what is our Instagram and all those things, right? So these, all things will be having some APIs guys. Okay, so to connect from your code to the website directly, so you can directly upload a video directly from your code to YouTube. So you can code it in that way. So that is the main use of this AP's, okay, so the API is nothing but an application program interface. So basically using a program you can interface with the application using a particular set of lines of code. You can do. So these API's are written by the original owners of the company or the developers of the company to make the users a bit easy to work on that. Like programmers to easily work on that. Okay. Okay so basically the database owners like database might be of SQL or Oracle or anything, right? So those will be creating a particular API for that particular thing only. And they need to install this on every client system or every system to make it working. Okay. Okay so here, avoiding ODBC, we use a vendor specific database API. So this finally removes the operate operating system dependency. So now this can be run on any operating system guys, because it is not created by Microsoft or it is not created specifically for Windows. So that is the main advantage. Okay, so as we are using directly direct vendor API. So that's an advantage. But this vendor specific API should be installed on all the systems. So now this is the drawback which they came up and as well as the transitional flow is also the same number of steps. So if you notice again here we are, we need to, if you execute a query, it moves in the same three step process and it comes in the three step process. So again the same number of steps are there. And again we got up with some more issue. That is nothing, but you need to install it on everyone's system. So if someone is visiting your website and if he wants to send the data, he need to have this API installed. And if it's not installed the data cannot be received by your server. So that could be a huge issue. Right? So that is the reason why this is also not used guys. Okay, so to resolve this issue they came up with a network protocol guys, for this, if you want a diagram I can draw it, but I am not sure about the diagram guys, because I didn't find anywhere in the Internet. Okay, so assume that these two are client systems and this is the server guys. So you will be initial installer installing your API in the server, okay? And whenever someone connects to the server through Internet, you will be transferring this API and you will be like a small copy, you'll be sending to both of them. And now they can connect with your server and they can do many operations like a basic, basically it is indirectly installed. You can select for a specific amount of time. So just a small modification to type two. Avoiding multiple installations here we may he, may he maintain a server through which we run type two. So type two API will be running on this server. Hence as it shared by the server, it is called as a network protocol driver. So basically we are transmitting this API tool within this network, right? So within the paths, whoever is connected. So that is the reason why this is called as network. So now I think you are getting the idea why I underlined the network. And in the previous why I underlined the API. And in the previous why I underlined the ODBC bridge. Okay, okay so finally at the end of avoiding all these issues, we got the type four. Okay so basically type four will not be using any kind of middleware, guys. It is not ODBC, it will not use ODBC, it will not use APIs. So even we use this driver now. So even today we are using this driver. In the last example, as we discussed, this driver only. So here no middleware, that is nothing but ODBC or database vendor specific APIs are not used here. The diagram is really simple guys. So here it is only two step process. So instead of three steps, here we are taking only two steps. So Java application to the API, sorry, to the driver driver to the database, again, database to the driver driver to the application. Okay, so here in this it completely depends on the database, right? So if you are using SQL or oracle. So the driver driver URL will be in this way dot mysql, dot JDBC, dot driver for MySQl and oracle dot JDBC dot driver, dot oracle driver. So this is for oracle. So basically these drivers you can find directly in dot jar file, guys. So inside that file you will be having this directory structure insert, you'll be on MySQL. Inside mysql you'll be having JDBC, inside JDBC will be having drivers. So in this way the whole logic will work. Okay, so I hope everyone got some basic idea about JDBC and its drivers, right? So in our examinations, most of the examinations, most of the questions were asked from JDBC only. If there are any missing questions. I'll try to cover them, guys. Okay. Okay. So this is the last lecture of this subject, guys. Okay. Okay. So let us meet in the review lecture. So let us meet in the review lecture. Thank you. Thanks for watching.`
    ,
    `So this is the first lecture over Python course. Or you can say Python course. We'll see in this video introduction to Python, right? You can say some features of this language, application areas who are using this Python, why this is so popular nowadays, some features, this kind of thing we'll be discussing in this video about Python or Python. I'll pronounce it as Python, right? Okay. Now see, Python is nowadays the most popular programming language. Or you can say it is the fastest growing programming language nowadays. It's not like that. It is new language. Because, you know, you think that recently it is. It has become so popular, so it is a new language. No. The concept of Python came into picture in 1989. And even Java was. The concept of Java came into picture in 1995. So it is before Java, right? But recently, in past few years, like Python has become so much popular and why? So that also we will discuss right now, basically, in every area Python is being used right now, the main areas are machine learning, data science, artificial intelligence. See, nowadays the data is a big problem. Many companies like you can say your Facebook, YouTube, any shopping websites, they are having data of billions of users, right? And how they manage that data. And one more thing is what? See, I think you have noticed, if you suppose nowadays I, you know, search for specially chicken curry kurtas, right? So I have. I've been looking for these kurtas on two or three websites, shopping websites. And whenever I open any other website, you know, for study, that kind of thing. So those relevant ads, they show me ads of those chicken curry kurtas and all. So how they come to know the advertisers, like how they come to know that I am interested in buying those chicken curry kurtas. So this is what they have analyzed my data, how many websites I have visited in which I am interested. So they have analyzed that data. They have collected my data. They have analyzed that data. And according to that, they have mined, you can say, some pattern they have formed and they come to. They come to know that I am interested in chicken curry kurta. So they show me the relevant ad. I think you must have noticed this thing also, right? So this task is what, this analysis of data and all in this also Python is being used, right? So in many areas, this is one application of this language. And see, in many areas, like whether it's software development, it's web development, software testing, machine learning, artificial intelligence, data science, game development, making of any apps, mobile apps, desktop app websites or web apps, anything hacking, even hacking. In many areas right now, Python is being used and it's not like that. Small companies are using this language. No, the big giants, companies are using this language, maybe the main language or supportive type of language as a support language. You can select like Google, YouTube, Quora, Instagram, these companies are using, these big giants are using this language, right? And the person who are using it, researchers, scientists, software developers, software engineers, software testers, game developers, mainly data analyst and even school going kids, they are also learning, or you can see using this language, see, because no researchers and scientists, they want, they don't want to, you know, utilize or you can say, waste their time by learning a complicated language. And Python is easy language. So they went for this language, Python language. So that is why recently this field is on boom, machine learning, artificial intelligence, data science, this kind of thing. So that is why with that field Python came into picture. Because these kind of people, researchers, scientists who they are working in this field, they want a simple language to work on, right? They don't want to waste their time on learning a complicated type of language. Python is very simple, very easy to understand language. So they adopted for this language. And that is why this language has become so much popular, you know, recent years. So why it has become so popular? Because first thing is, it is easy to learn, easy to understand, and it has wide range of applications. I have told you in how many areas, almost in every area it's been used. Second thing you can write down, you can solve any problem with fewer lines of code. Suppose you want to print hello world in C language. So those header files, main function and printf, hello world in C, also header files, std namespace, std main function and all in java those you can say domain function, system, sorry, public static, void, main, then system outdoor, print l and then hello world. This kind of thing in python, simply what you need to write. Print hello world, that's it. Nothing else. A simple line, nothing else. So in fewer lines of code you can solve complex problems, right? And more easily you can understand this code. So it will, you know, save your time. Also another benefit, and it is high level language, you don't need to be aware about those memory management type of thing. Like in C, you have to aware, you have to, you know, keep track of, you have to manage the memory manually. But here automatic memory management is there. It is high level language. So you can do more with less, right? With writing, you can say less code, you can do more in this. It is object oriented programming language, but it's not like that. It doesn't support that paradigm, procedural and functional. It support multiple paradigms, object oriented, procedural as well as functional, right? It is multi paradigm language. It is general purpose language, almost in every field for making everything. You can use this language or you can see it's multi purpose language, it is interpreted language. These are some features of Python. You can just note down these features. So it is also Python is an icon is interpreted language, not compiled language, right? And one more feature of this is it is open source, right? So that is why it is having a huge community and rich library, many inbuilt packages, modules, functions, those you can use in your program without writing those functions from scratch, because it is open source. Anyone can contribute in this, right? They can write down their packages or functions or modules and they can contribute. It is open source, anyone can use those inbuilt functions, libraries and all, right, like in c and C. Also we have some libraries in there, predefined functions are there. These are already defined function. Like if for string concatenation we use directly a function, strcat. So the definition of that function is already in those libraries. You don't have to write down the definition of that function. You don't have to tell the compiler, you just use that header file string h and you can call that function because it is already been defined in the library by some other people, by someone else. So same, it is also having rich library because it is open source. So, and huge community it is having. If you are finding any difficulty in this. So there are many forums, discussion forums, you can post your queries and definitely you will get answer. For example, some libraries are, you can say numpy pandas, Tensorflow for machine learning and data science. While in this field they use that library. See basically libraries are what some codes are written codes of some basic functions are written on those libraries so that programmers don't have to write down those functions from scratch and they can reuse those functions in their own program, right? So that obviously it will save time of any programmer, right? Because they are using, they are reusing that function. Like for making chapatis, you need atta, right? So just go to any shop, maybe you can buy whole wheat or atta, right? But the process behind that thing, generally farmers do that process, that long process, right? They have done for you, so they have built those things for you. You just have to go and buy. You can reuse that. You don't have to do the whole process from scratch because it will take definitely long time and you don't know, definitely most of you don't know how to that farming process. So same thing. Those inbuilt libraries, packages, modules, functions are there, programmers can reuse those functions and so it saves the time of programmers. And many frameworks are also there, like Django Flask if you are interested in web development, right? And I told you, like automatic memory management is there in this language, right? And it is extensible language, right? You can extend, you can support, more features can be supported, you know, can be added like more libraries or functions can be added because it is, it is open source. Anyone can contribute in this thing, in this open source code, right? And there are lots of career opportunities also. I'm damn sure this point is very important for you guys. Yeah, there is lots of career opportunities for this, in this field, for this language. Because, you know, I told you, this is one of the fastest growing language in terms of developers, in terms of the companies using this language, even the big giants like YouTube, Quora, Instagram, Google, these companies are also adopting this using this language, Python. So there are many career opportunities and average salary is also high. Like it's from eight to twelve lakh per annum. So that is why it is so popular. And I'm sure you are aware about now this language, some features while using it, the application areas of Python and all. So please make down your own notes. If you have any doubt, you can let me know in comment section, you can ask me, right? And we'll be using Python three point x, the latest version of three point x, because Python two point x, that version is obsolete now. It's no longer supported. From January 2020. They have declared that they will not support this version now. So we'll work on Python three point X version, the latest version, whatever is there. So in the next video we'll see history of this language first, because, you know, before going to battle, better know your enemy. So we'll see history of this language properly, like the inventor of this language, how, when, why he developed this language, why this is called as the name Python. So these things we'll be discussing in next video, right? So now see you in the next video. Till then, bye bye, take care.`
    ,
    `Hey, what's going on, everybody? It's bro. Hope you're doing well. And in this video, I'm going to explain object oriented programming in Python. So sit back, relax, and enjoy the show. If I could have just a moment of your time, please like, comment and subscribe, I would greatly appreciate it. Welcome to today's topic on Python object oriented programming, also known as pop. And in today's video, we're going to be creating objects. An object is an instance of a class. By using programming, we can create representations of real life objects. So look around you. Wherever you're sitting or standing right now, you are surrounded by objects. Next to me. I have a phone, a television, some snacks, and I'm talking into a microphone. Point being, we can use programming to mimic real world objects by assigning a combination of attributes, what an object is or has, and methods what an object can do. Now, in order to create an object, we'll need to create a class. A class can function as a blueprint that will describe what attributes and methods that our distinct type of object will have. You can either create your class within your main module, or you could create a separate file dedicated solely for your class. Now, to create a class, we would type class, and then the name of the object that we would like to create. So today I would like to create some car objects, because I like cars. So we would type car. And a common naming convention with class names is that they should be capital. So car is going to have a capital c, and for the time being we need to type in something. I'll just type in pass as a placeholder. So if you have a small program, it may be better to write your class within your main module. But if your class is fairly large, you may want to consider placing your class within a separate module. So if you were to take that route, we would go to file, new python file, and we would name this car. Click python file, and we would declare our class within the separate module. So class, car. And for now I'll type in pass. Then we just need to import this class. So within our main module, we would type from the name of the module, import the name of the class from car. Import car. Now, objects can have some combination of attributes and methods. Attributes describe what an object is or has. So what are a few attributes that cars might have? They might have a make. So let's create a few variables. For the time being, I'm just going to use none as a placeholder. Cars can have a model, a year and a color. Now, objects can also have methods. What kinds of methods could cars perform? Perhaps a drive method and a stop method. So let's define those definitely. Let's say drive. And we'll have one argument. Self. Self refers to the object that is using this method. Now what do we want to do when we call this method? Let's say this car is driving. Let's create a stop method as well. Def stop. And we will print this car is stopped. We now have all of the different attributes and methods we would like our car objects to have. But there is one more thing that we need. It is a special method called the init method that will construct objects for us. In other programming languages this is known as the constructor. So we need a special method that will create objects for us. So we need to define this method def and the syntax on this is somewhat strange. It is two underscores in it, short for initialize, two underscores again. And then we need at least self as an argument. And then we can actually assign our car objects unique variables. So take all of these attributes that we have and we're going to place them within this init method. Now we can receive arguments when we create car objects, but we need to pass them in as arguments to our init method. So we need to set up some parameters. Let's say in order to create a car object, we need a make, a model, a year, and color. Then when we receive these arguments, we can actually assign them to each cars specific attributes, but we need to precede each of these with self. Self is referring to the object that we're currently working on or creating. So self dot make, self dot model, self dot year, and self dot, color. And then when we assign these, we're going going to to say self dot make equals whatever make that we receive when it's passed in as an argument. Self dot model equals model, and continue that pattern for year and color. All right, that is all we need. For our class car. We have a constructor. We're assigning arguments that we receive to the attributes of our car object. And we also have two methods, one for drive and one for stop. Now we can start creating some car objects. So going back to my main file here, to create an object, we need a unique name for it. Let's call this first car just car. One equals the name of the class car, then a set of parentheses. Now, in order to construct a car object, we need to pass in a matching set of arguments. You can see here that we need to pass in a make a model, a year and a color. So what kind of car should we make? Let's say that the make is going to be Chevy. We need a model. Perhaps Corvette a year. 2021 is good. And a color, let's say blue. All right, now, let's actually access some of these cars attributes, and I should probably put this one in a print statement. So print car ones, make, and this should print Chevy. Then we can do the same thing for model, year, and color. So let's change some of these around model, year, and color. Yep, this object is a Chevy Corvette 2021, and the color is blue. And we should have two methods as well. So, car one, I would like this car to use its drive method. This car is driving. And let's have this car use its stop method. Car one, stop. This car is stopped. There's one thing that I should mention real quick, because I forgot to mention it earlier. So, within our init method, you can see that we need five arguments in order to construct a car object. Self, make, model, year in color. But when we pass in our arguments, we're not passing in anything for self. We only have four arguments here. That's because with Python, we do not need to pass in self. That's done automatically for us. We're referring to the object that we're dealing with. As you can see, with our drive and stop method, we need to pass in self in order to execute our method. But when we call this method, we do not need to do so. So just remember, with Python, with self, we do not need to pass in anything for this argument. That is all. Now, the nice thing about this is that we can reuse this class as a blueprint to create more car objects. We just call that init method, that constructor. So this time, let's create a second car called car two, and this will be a different kind of car. What kinds of arguments should we pass it? Let's say this is a Ford Mustang. The year will be 2022, and the color will be red. Alright, let's check car two's attributes, and let's have car two use its drive and stop method. This is a Ford Mustang. The year is 2022. The color is red. This car is driving, and this car is stopped. One other thing that we can do too, is that within our methods here, let's replace car with the name of the model that we're working with. So this plus, self model plus is driving. Now, this self keyword, think of it as you're replacing self with the name of the object that we're working on. If car one is using its drive method, replace self with car one. If this is car two that called this method, then replace itself with car two. Think of it that way, and let's do the same thing for stop this plus self dot model plus is stopped. All right, probably don't need these anymore. So let's have car one use its drive and stop method. This Corvette is driving. This Corvette is stopped. Let's try this with car two. This Mustang is driving. This Mustang is stopped. Now you can have them do things independently too. Let's have car one use its drive method, and car two use its stop method. This Corvette is driving, and this Mustang is stopped. In conclusion, a class can function as a blueprint to create objects. We can assign a attributes what describe an object is or has, and methods what each object can do. And then within our class we have a special method called the init method. We can pass in some arguments and assign these arguments to each objects attributes. And then we can reuse this class as if it was a blueprint so we can create more objects out of it. So that is the basics of object oriented programming in Python. If you would like a copy of all this code, I will post this in the comment section down below. But yeah, that's the basics of object oriented programming in Python. Hey, you. Yeah, I'm talking to you. If you learned something new, then help me help you in three easy steps by smashing that like button. Drop a comment down below and subscribe. If you'd like to become a fellow bro.`
    ,
    `Welcome back, aliens. My name is Arun Veji and in this video we'll talk about Django. The Django. Django is a free and open source web application framework. Now you will say, okay, we know about free part, we know about open source part. But what is a framework? Now, framework is a combination of certain components and packages. Of course, if you want to build some complex application, you there can are certain things you need ready made example. If you want to build web application, you don't want to do everything from scratch. It will be time consuming, right? So we will be using a framework here. Now, Django is not the only framework available. The moment you say web app, we have certain frameworks available. One of them is or one of the famous one is Django. But why we have to learn Django there. Now, Django, as we know, is a web application framework. That means you can build web application. But hold down our websites are so important, of course, right? If you talk about any business, they need their own online presence. In fact, most of the virtual solutions which we use nowadays are the web applications. Example, if you want to buy something online, we have Amazon, we have Flipkart, we have eBay. If you want to book a cab, we have Uber. Right? We have so many applications available which are based on web. So if you want to build them, you will be using Django there. But the moment you talk about websites, we know that you can build websites with the help of HTML, CSS and JavaScript. So basically we use HTML to design the page. You can think HTML as a makeup for you. Now then we have CSS. If you want to improve your design, if you want to have that uniformity in the design, that's where you will use CSS. So we have HTML CSS for designing to make your website interactive, we can use JavaScript. So yes, we use HTML CSS, JavaScript in the front end. What about the backend part? What if you want to make your website as a dynamic website? Example, let's say if you go to Facebook, you know, everyone will get different feeds. You will not see the same message which everyone is saying, right? So your feeds will be different from them. If you go to Amazon, you can buy stuff online, you can pay, you can transfer amount online. And all this thing needs certain operations or certain processing done on the backend side. And that's where we need a language which will work on the backend. But which one? So we have options there. We have Java using. If you heard about servlets, we can do that there. We have php we have Asp, we have Python. But hold on, how can we do that in Python? And that's where we have Django. So you can use Django to build web application, the backend part in Python. Okay, as I mentioned before, Django is not the only web framework available, but it's quite famous there. Now when it comes to web application, one thing is very famous, which is MVC. Now it doesn't matter which language you learn, maybe Java, PHP or ASP, we have this thing common which is MVC, model view controller. Now basically we do that so that we can separate the concerns. We have model for data. We have view the HTML format which you see on the screen. And then we have a controller which will control these operations. In fact, we have a separate video on what is MVC. But then in general, when you say MVC, it will help you to build a good web application. But in Django, we have something similar to MVC. Not exactly MVC, which we normally call as MVT or MTV doesn't matter. So that MVT which is model, view, template. So basically in MVT we are replacing controller with view and we are replacing view with template. Again, how that works, we'll see that later in the, in the practical video. But then Django basically follows MVT. So if you have worked on MVC or on different language, don't worry, it's almost same, but with some changes. But why to choose Django when you have other web frameworks available in Python? The first reason, Django is fast, which simply means if you want to build something, you should not be spending much time in just for the configuration. So Django will help you to build applications faster. Second one, the number of components available. Now think about this. If you want to record a video, you need certain components with you, right? You need a camera, you need lights, you need a mic. In the same way, if you want to build a web application, you need login, you need database connectivity, and all this thing comes bundled in Django. That's an advantage and drawback as well. Advantage is you have everything with you. The drawback is you have everything on you. The third one is security. Now, if you are building an application where a user will interact, of course they will be sending their data and you want to secure them, you want to secure your users. So Django will provide you that security. And the fourth one is scalability. What if in future, your website skills, you want to have multiple users, you want to have more features. So Django will give you that option as well. And that's the reason you should be learning Django now. So Django is interesting. So if you have done your python course before on this channel, now you can also learn Django because that's the next step you can take. So that's it from this video. I hope you are enjoying this channel in the comment section and do subscribe for further videos. Bye.`
    ,
    `Hey guys, welcome back to another video by simplilearn. In today's video, we'll be learning all about React J's. So let's jump in and see what's in store for us. So we'll be covering topics on what is React? Why React? Features of React React prerequisites and its industry trends let's go ahead and begin with what is reaction. React is a JavaScript library used to build fast and interactive user interfaces for both web and mobile applications. Now one thing that makes React extremely powerful is the fact that it's open source. Any user can access its source code, modify it, and enhance it. In a typical model view controller architecture, React defines the view part of the application. It is also responsible for how the app looks and feels fun. React was built by Jordan Volker, an engineer at Facebook. Now let's go ahead and see how react works in real time. Consider a typical web application, say Instagram. The entire UI of the webpage is divided into several components. We have the search component, a profile description component, stories component, and a post less component. These components make the code easier to debug and always remain discrete. Components also make development and maintenance of web applications faster, as multiple developers can work simultaneously on different components of the same web application. Now let's see why react is so popular these days. React helps in creation of dynamic web applications. It also provides performance enhancements. Now there are several performance enhancements like virtual Dom and one way data binding. We'll learn about these topics a little later in the video. React uses reusable components. Now this helps decrease the development time. React involves unidirectional flow of data. React also has a small learning curve. Compared to other frameworks like angular, React is much easier to learn. React can also be used for mobile applications. React recently released an extension called React Native that is used for developing mobile applications that are cross compatible. It also has dedicated tools for easy debugging. Now let's dive in to the features of react. First, let's understand JSX. JSX is a syntax extension to JavaScript. Using JSX, we can add HTML to the JavaScript file. All coding in react is done using JSX. It also helps in making the code easier to understand and debug. Ultimately, JSX is a combination of JavaScript and HTML. Now let's consider a small example. Const simple here is a JavaScript notation. H one tags indicate HTML. Again, the semicolon indicates JavaScript. Note that the semicolon is not mandatory. However, it's a good practice to include it. Moving on. The next feature is virtual DoM, which is an acronym for data object model actually defines how documents are accessed and manipulated in a webpage. It represents the entire structure of the webpage in the form of a tree. Now let's see how this actually works. React creates a virtual dom that is the exact copy of the real Dom. Traditionally, whenever something changes in the web application, all objects in the real Dom are updated. This makes it extremely slow. Lets see how react counters this. Now consider two objects whose states have been changed. React now compares the virtual dom with the virtual Dom snapshot that was taken right before the update. By comparing the new virtual dom with the pre update version, react figures out exactly which virtual Dom objects have changed. Now react only updates those objects on the virtual domain. This makes a big difference when it comes to speed coming to the next feature. Performance react uses virtual Dom as discussed earlier, virtual Dom impacts the speed of the web applications. We also took an example of Instagram and learned how multiple components can affect the development time. They help improve performance drastically. The next feature is one way data binding. This means information flows in only one direction. One way data binding is specifically used when information is displayed and not updated. Remember that the components of react are functional in nature. That is, they receive information through arguments and pass information via their return values. The next important feature is extensions. React has many extensions that we can use to create full fledged front end applications. It provides server side rendering, which means that the application is rendered on the server rather than in the browser. React native, which is a react extension, is used for developing mobile applications. There are many other extensions that react provides for every scenario in web development. Now let's look at a few of them. React native lets you build mobile applications using only JavaScript. A react native app is a real mobile application and not just a web application running on your mobile devices. Thousands of applications like Facebook, Instagram, Pinterest, Skype use React Native. The next popular react extension is flux. Flux is the application architecture that Facebook uses. Flux implements unidirectional flow, which makes it easier to understand what actually is going on. Now let's see how it works. When we trigger an action, the dispatcher will get notified. The dispatcher receives actions and dispatches them to the stores. A store is what holds the data of an application. Stores will register with the applications dispatcher so that they can receive actions. Data from stores is displayed in views. Actions define the internal API of your application. They capture how anything might interact with your application. The last feature of react is debugging react applications are easy to debug thanks to the large and active developer community. You can practically debug react codes within your browser. Now notice the small react extension icon at the top right corner. This developer tool allows the user to inspect the code and also easily debug it. Moving on, let's learn about the building blocks of react components. State and props are the essential concepts that one should know before implementing reaction. They are the foundation on which react is built. Now, what exactly are react components? Components are the building blocks of any react application. React divides the user interface into multiple components wherein each component defines how a particular element is viewed in the application. React components remain discrete and are processed independently. Another feature is reusability. Components can be reused multiple times across the application. This reduces the development time. Consider the following code snippet a component is implemented as a JavaScript class having some state and a render method. State is the data which we want the component to render. The render method is responsible for how the UI looks and feels to the user. The next concept is state. State of a component is an object that holds some data. This data influences the output of a component. Every time the state of an object changes, the component is re rendered onto the screen. Now let's see what props are. Props, a short for properties, allow us to pass arguments or data to components. Properties help make components more dynamic. It is important to define all the properties, their types, and their default value. Props are passed to components in a way similar to that of HTML tag attributes. Now consider the following code snippets. This shows exactly how properties are passed to components. Also, detailed illustrations on components, props, and state will be shown in the upcoming videos, so stay tuned for that. Moving on, let's go through some of the things that you should know before you can actually start working on react. You should be familiar with programming concepts like functions, objects, arrays, and classes. One should also have a basic knowledge of JavaScript and a familiarity with HTML. Don't worry if you feel like you're not good at them. Once you start working on them, you'll get a good hang of it. Finally, let's go through the impact of react on the IT industry and get insights into the salaries of react developers. Statistics show that react developers earn way more than other web developers. According to Payscale, the average salary for a React developer in the United States is a whopping $91,000. The average salary for a React developer in India is 7.25 lakhs per annum. Over the recent years, React has gained immense popularity and is being adopted by many companies. According to the data by Google Trends, React has had a better growth scale compared to other frameworks like angular and Vue. Statistics show that front end developers have wholeheartedly adopted this lightweight framework, forgoing other available options. If you are skilled and have a knack for front end development, React can help you gain fantastic career opportunities. Lastly, talking about a few companies that use React devotionally, we have Facebook, Instagram, Netflix, Dropbox, WhatsApp, among others. So that is it for this video. I hope you enjoyed learning about React. To gain more in depth knowledge about React, watch out for our upcoming videos. Until then, keep learning and stay tuned to simply learn. Hi there. If you like this video, subscribe to the Simply learn YouTube channel and click here to watch similar videos. To nerd up and get certified, click here.`
    ,
    `The core problem with reactJs state management is of course that we get app component, we got sub components, and if I want to change a text, I can't do this directly. Instead I have to inform the parent, change the text there, and if I got additional components, well then it gets even more complex. Therefore redux has a different approach. Here we have our view or our application, we might say, and in this application, in any given component, we dispatch actions. So one action might be change name to stick with the previous example. This action then is ran through a reducer. That is where the redux redux reducer, where the name comes from. A reducer has one simple job or task. It takes the action, handles the action. So if the action is change name, the reducer will have a method which knows what to do upon a change name action, namely change the name, and it will then take the old state and manipulate it in a way that it now reflects this action. So takes the old state, adds or executes this single action on the old state and gives us back a new state. Now this is best done immutable, which means don't change the old state. Instead take it as a basis and then create a brand new state. So kind of a copy of the old state with the change in place, so the old state stays untouched. We just create a new state and return this note. You don't have to follow this immutable approach, and I will come back to this in a future video, but it's a good practice to do so because it gives you unique states in your application, which makes it very clear at which point of time you had which state. So we're in this reducer and we're getting back a new state. Now, this state is then stored in, well, a store, and we have only one store in the whole application. In our redux world, this store has one simple task, store our state. That's why it's called store. And we may have multiple reducers, but we only have one store. So multiple reducers for multiple parts of our application, but only one store which holds one unique store. And then our application can subscribe to that store, or specific components can subscribe to parts of that store, parts of the state they need. And whenever the state is updated, and therefore a new state is passed to the store, the store will automatically send it to all the components interested and the application will update. So back to the previous example, we had our app component with all the other components here, but now we also have the store. And if we want to change something in the user component from the main component. Well, then we dispatch the action and reduce the state or change the state. And then we pass the state to all the components. Interested? That's all. So that's the theory. Let's start seeing this in action.`
    ,
    `Facebook's most famous contribution to the open source community is of course react, but it's not the only library that they have. If you look at their GitHub repository, you'll see that they have a whopping 114 repos, including the jest testing library flow for adding static typing to JavaScript draftjs, which is a text editor framework, and of course prop types for React. Beyond that, Facebook also has a separate repo called Facebook experimental, which they describe as Facebook projects that are not necessarily used in production but are being developed in the open. Nevertheless. One of the libraries published by Facebook Experimental that's getting some attention recently is recoil. Recoil is a simple state management library for react apps and it can be used in a similar way to how you would use context. Now, in the last video I discussed state in React and we took a look at context and the use context hook. So if you haven't watched that video yet, I'll link to it in the description for you. They say recoil is not yet recommended for use in production apps, but we've been using it at work since late last year and I'm using it in my own SaaS project without any issues. So before we dig in, just a reminder that if you like these videos, please hit the like button and also subscribe my channel. It'll help other people discover my videos and also help the channel get off the ground. Alright, let's take a look. So for this demonstration of recoil, we're going to use the same demo app that I used in last week's tutorial, which was for context. So you can see we have a business name with an input. Anytime I change the text inside a business name, it's going to change the title up here and it's going to change the footer below. So the first thing we need to do is we'll take a look at the recoil docs. I'm going to copy yarn, add recoil, paste that into the terminal and that's now installed recoil. So just check package JSon and you can see here we now have recoil installed. Okay, so the first thing we need to do is we need to import recoil route. So if you have a look at app Js here, you can see that we have businessnamecontext provider. So this recoil route will go in the same place where we have this business name context provider. So I'm going to start off by doing import recoil route from recoil and I'm going to inside of this wrap homepage in recoil root and I'm going to save that. Now the next thing we need to do is we need to create an atom. So as you can see here, an atom represents a piece of state and atoms can be read from and written to from any component constraint. Components that read the value of an atom are implicitly subscribed to that atom. So any atom updates will result in a re render of all components subscribed to that atom. So this is how you create an atom. So what I'm going to do is I'm going to create a separate file and I'm going to call it atoms and it's a JavaScript file and I'm going to import atom from recoil. I'm going to call this business name state and then inside of it I'm going to give it a key which as you can see in the doc, they take the name of the atom and they use that for the key. This must be a unique id. Nowhere else in your application should you create a second text state, or in our case business name state. So they must be unique to the application. So I'm going to give it a key, a business name state, and I want to give it a default value. Now as you can see, the default value is the initial value of that state. For us, we're going to give it an initial value of Dunder Mifflin. And what I'm going to do is I'm going to export that from this file. Okay, now I'm going to go into the home page and you can see here we're using context at the moment to set the business name and to read the business name. So we're going to change that from using context to using recoil. So if I go into API reference and click on state, what I'm looking for here is use recoil state. So if I go into the homepage I'm going to import, use recoil state from recoil and I want to import the atom that I just created. So I'm going to do import business name state from atoms and thank you versus code and use recall state. Looks almost exactly the same as React's usestate hook. So I'm going to do const business name, set business name instead of usestate I'm going to do userecoilstate and I need to pass in the atom as that first argument. So businessname state, what I can do here is now delete this and I'm going to delete this because we're not using it anymore. Give that a save, go back to the application, give it a refresh just to show you that everything's cleared and using the default values. And you can see we still have Dunder Mifflin here. We still have Dunder Mifflin here. And we still have Dunder Mifflin here. Now, the title and the footer are currently being used by context, but this value here is now being used by recoil. So if I change this, you can see that these aren't being updated because like I said, they're using context. But this is working now. So if I gonna go back, so I'll go back to the title and what I'll do is I'll pass in business name equals business name. And I need to make sure that we have the prop in this title component and we don't want to use contacts anymore. And you can see now the title is updated, so that's reflected from the value that we're passing down, which we're setting inside of recall state. And if I go to the footer instead of passing the prop down, I'm going to do the same thing I do in homepage, I'm going to do the same thing that I do inside homepage. Except this time I don't need to set the state value here. All I need to do is read it. So I could theoretically still use recoil state and only destructure business name. But according to the recoil docs, what I should actually be doing is using their hook userecoilvalue. So what I'll do in footer is I will import use recoil value from recoil. I'm going to delete this instead. I'm going to import business name state from atoms and I'm going to use recoil value pass in business name state. And I'm not destructuring anything because what it's doing is it's returning the value directly. So it's not returning an object, it's not returning an array, it's returning the actual business name. So I save that now, we'll go back to the app. You can see now that the footer has the value that I have in state. So if I was to fill this out, but the title which is taking it as a prop, and the footer which is reading it from recall state are working. Now, if we have a look at the docs here regarding state, we have a few other hooks that we can use. So I would advise you to read through the docs there. But we've already demonstrated use recall state. We've demonstrated use recall value. We have use setrecourse state, which as you can imagine is just the setter so what that does is it returns the setter function. So here's an example. You take the atom and we have down here, we pass the atom into use set recall state, and that gives you the setter. So that's useful if you have a component where you only need to set the value in state as opposed to actually reading it and setting it. We'll go to the next one, use reset recall state. And what that does is it will reset the state to the default value which you might remember we set inside of the atom. There are a few other hooks here as well. Use recall state loadable. Use recall valueloadable. These are a little bit more complex and I would encourage you to have a look at documentation. As far as a simple setting and getting of state. These are the hooks that you're going to use. Now if we go back into the basic tutorial and have a look at selectors, you can see here it says a selector represents a piece of derived state. Okay? So we'll have a look down here and it gives us an example of how you might use a selector. So the selector will take existing items inside of a recoil state and then perform whatever calculation you require on that value and return that derived piece of state. So in this case, in this example, what we're seeing here is we're creating a new item of state using a selector. We're calling it filtered to do list state. So we're giving that the same key. And then there's this get function which we then use to get todo list filter state and todo list state. Okay, so we have the filter and we have the list here. And then what it's going to do is it's going to filter the list based on this filter value and return a derived piece of state. And finally, if you watch my context video, you'll see that we created a custom hook called use business name context. I can do exactly the same thing with recoil. I can create a hook called use business name. And in here I'm going to do import, use recoil state which is here from recoil and import the atom business name state from atoms. I'm going to do use business name and then I'm export that as default. What I'm going to do is I'm going to copy this code from the app component, paste it in there, and then I'm simply going to return business name and set business name. Now I can return this in an array as well if I want, but because we're only using business name and set business name. There's no need to give me the ability to rename these when I'm destructuring. So I'm just for simplicity, just going to return an object, at which point I can destructure business name and set business name and keep them named the same way. So now we go back in the homepage, and instead of importing the atom, I'm going to import my hook. Use business name, use business name, delete that, use business name. And this, of course, is an object. Import it twice. And I also don't need to import this. So here it's just simplified again, because I just need to import the hook and then use the hook here below. And you can see that the app still works as expected. It's using the default value of Dunder Mifflin, and everything still works. Title, input, and footer all still work.`
    ,
    `PostgreSQL, the most trusted name in open source relational databases. Its development dates all the way back to 1986 at UC Berkeley under the direction of Michael Stonebreaker. Like other pure relational databases, it stores data in tables, columns, and rows, and uses structured query language to read and write data. However, Postgres is technically an object relational database, which means it can create its own custom data types to store objects with properties and support advanced features like inheritance and polymorphism. When writing data, it runs fully. Acid compliant transactions also adds its own special sauce called multi version concurrency control, which gives each transaction a snapshot of the database, allowing multiple transactions to run at the same time without traffic jams or locks. Developers also love its extensibility. Queries can be reused by writing stored procedures, and it even supports languages beyond SQL like Python and C. And it has a robust ecosystem of extensions like post gis to provide geospatial data for apps like Uber or Citus, who shard and distribute the database to any scale, or pg embedding to give AI chatbots long term memory, and the list goes on. To get started, you can download and install it locally or better yet, use a free cloud database like neon which provides auto scaling out of the box and a nice UI to manage your data. In addition to a bunch of other advanced features like branching, create a new database, then head over to the SQL editor to run your first query or connect it to your iDe with an extension like SQL tools. We could get started by creating a new table, but because this is an object relational database lets begin by creating a custom data type which defines the structure of an object with corresponding properties and types. Whats awesome about postgres though is that we have more exotic data modeling options like arrays can be used by putting brackets in front of a type, then make it a two dimensional array by adding another set of brackets. We also have JSON data types to handle unstructured data and even key value pairs with extensions like Hstore. Now that we have this custom type we can use it within one or more tables like one table for programmers and another for designers. Once the table is created we can then use an insert statement to add a row of data into it. Notice the use of a double colon to cast a string into JSON or Hstore types. And now finally we can read the data with a select statement that uses dot notation to access the properties on our custom object. Every table has a unique primary key and we can create relationships by storing the primary key from one table as the foreign key on another. Like a programmer might own many lambos. We can then find those lambos by doing a join query that compares the programmers id to the Lambos owner id. This has been postgresql in 100 seconds. Big shoutout to neon DB for sponsoring and making this awesome database free to use in the cloud. Thanks for watching and I will see you in the next one.`
    ,
    `What is SQL? SQL is a database programming language for retrieving and managing data in relational databases. SQL is an acronym for structured query language. The relational database Management System RDBMS standard language is SQL. SQL is the standard database language used by all relational database management systems such as MySQL, MSaccess, Oracle, Sybase, Informus, postgres and SQL Server. They also use a variety of dialects like T. SQL is used by MsSQl server Pl. SQL is used by Oracle jet. SQL is used by MS access. This query language was adopted by as an ANSI standard in 1986 and an ISO standard in 1987. It is the most important query language to learn if you want to work in the field of data science. SQL is used by big companies like Facebook, Instagram and LinkedIn to store data in the backend. So now lets see what is the significance of SQL? A computer programming language is a set of explicit instructions for accomplishing specific operations on computers or equipment. We can use precise algorithms to control the behavior and output of a computer using a programming language. SQL is one such programming language used by the computer. This helps computer and machines to process vast amounts of complicated data more efficiently and effectively. That is why SQL is beneficial to business, particularly in the development of system database management services. So let's see what are the different applications of SQL. As previously said, SQL is one of the most extensively used database query languages. Some of the applications are the users can gain access to data stored in relational database management systems using SQL. Users can use SQL to describe the data. SQL also allows users to define and manipulate the data in a database. It allows SQL modules, libraries and precompilers to be embedded within other languages. The users can have the ability to build and delete process database and tables. It also allows users to build database views, store procedures and functions. Permissions for tables, methods and views can be set by the users with SQL. So lets see what are the salary expectancy of SQL enthusiasts? From startups to established companies, the job market looks good for SQL enthusiasts and it is expected to grow exponentially in the coming years. SQL programmers or developers have good opportunities in all the geographies. Also, after obtaining a certification in SQL, the average salary hike expected is around 40% to 50%. So thats all about SQL. Happy learning.`
    ,
    `Hey everyone, welcome to another video in the MongoDB series. In today's video, we'll understand what exactly MongoDB is and what are its key features. But before we begin, if you haven't subscribed to our channel already, make sure to hit the subscribe button and the bell icon to never miss an update. Now, I'm sure you must have heard about databases, but MongoDB is a popularly used not only SQL database. Now, without further delay, let's begin and understand what exactly MongoDB is. So here's what's in store for you. First, we'll understand what MongoDB is. Then we'll understand why exactly MongoDB is used. Then we understand the characteristics of MongoDB. After that, we'll understand the working of MongoDB and how it functions. We'll also look at some of the commonly used applications of MongoDB. And finally, we'll look at the top companies that readily deploy MongoDB. So what exactly is Mongodb? It is a document oriented NoSQL database. It was initially released in August 27, 2009. MongoDB replaces the concept of rows of conventional relational data models with something called as documents. It offers developers the flexibility to work with evolving data models. Since it's document based, MongoDB allows embedded documents arrays and represents complex hierarchical relationships using a single record. It is also schema free, which means that the keys defined in the document are not fixed. As a result, massive data migrations can be ruled out. But you must be wondering when there's something like SQL. Why is Nosql or Mongodb used? There are a few reasons why MongoDB is widely used. First up is flexibility. MongoDB's notion of documents that can contain sub documents nested in complex hierarchies is really expressive and flexible. Flexible query a user can selectively index some part of a document or a query based on attribute values, regular expressions or ranges. Next up is native aggregation. Native aggregation allows its users to extract and transform data from MongoDB and either load them in a new format or export it from MongoDB to other data sources. It makes it extremely compatible. Lastly, as mentioned earlier, the schema free model. Now applications get the power and responsibility to interpret different properties in different ways. Now that you know what MongoDB is and why exactly it's used, let's have a look at the characteristics of MongoDB. Firstly, it's a general purpose database. Now, MongoDB can serve heterogeneous loads and multiple purposes within an application. Again, it has a flexible schema design. Document oriented approaches with non defined attributes that can be modified on the fly is a key contrast between MongoDB and any other relational database. Next up is scalability and load balancing. It's built to scale both vertically, but most importantly horizontally. Using sharding, an architect can share load between different instances and achieve both read and write scalability. When it comes to load balancing, this happens automatically and transparently to the user by the shard balancer. Again, we have aggregation framework. Now MongoDB offers an extract, transform and load framework that eliminates the need for complex data pipelines. Native replication now data will get replicated across a replica set without complicated setup. Security features, both authentication and authorization are taken into account in MongoDB. Next up is JSON. Now, JSON is widely used across the web for front end and API communication, and as such it's easier when the database is also compatible with the same protocol. Lastly, we have Mapreduce. Now again, Mapreduce is an excellent tool to build data pipelines and MongoDB uses Mapreduce readily. Now let's quickly have a look at the working of MongoDB. Data is stored in documents with the help of key value pairs. Now the data is stored in the BsON format at the back end. Mongodb converts JSOn data into a binary format known as Bson. MongoDB also makes provision for nested data. Now, all of these documents are stored in a collection. These collections hold multiple documents and since MongoDB is schema less, the documents in one collection need not be similar. Now again, these collections are stored in the entire MongoDB database. As mentioned earlier, MongoDB makes provision for nested data. This makes fetching of data extremely efficient when compared to other databases. Now you must be wondering where exactly MongoDB can be applied or used. So let me help you with that. Several areas of technologies use MongoDB as their dbms. Currently, some of them are Internet of things, mobile applications, real time analysis, personalization, catalog management, and content management. Now, all said and done, let's look at some of the companies that use MongoDB. Currently, companies like Toyota, SAP, AstraZeneca, Adobe, Verizon, Cisco, Barclays and Google, among others, readily deploy MongoDB as their database management system. So with that, we come to the end of this session on what is MongoDB? Now this was just an overview of what exactly the database management system does. However, if you want to learn MongoDB in depth, then watch out for more videos from us. Thank you so much for being here. Keep learning and stay tuned to simply learn hi there. If you like this video, subscribe to the simply learn YouTube channel and click here to watch similar videos. To nerd up and get certified, click here.`
]

export default Transcripts;